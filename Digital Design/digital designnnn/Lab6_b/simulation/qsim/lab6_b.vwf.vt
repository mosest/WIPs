// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2015 15:57:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab6_b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab6_b_vlg_sample_tst(
	add_sub,
	X,
	Y,
	sampler_tx
);
input  add_sub;
input [4:0] X;
input [4:0] Y;
output sampler_tx;

reg sample;
time current_time;
always @(add_sub or X or Y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab6_b_vlg_check_tst (
	Overflow,
	Result,
	zero_flag,
	sampler_rx
);
input  Overflow;
input [4:0] Result;
input  zero_flag;
input sampler_rx;

reg  Overflow_expected;
reg [4:0] Result_expected;
reg  zero_flag_expected;

reg  Overflow_prev;
reg [4:0] Result_prev;
reg  zero_flag_prev;

reg  Overflow_expected_prev;
reg [4:0] Result_expected_prev;
reg  zero_flag_expected_prev;

reg  last_Overflow_exp;
reg [4:0] last_Result_exp;
reg  last_zero_flag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Overflow_prev = Overflow;
	Result_prev = Result;
	zero_flag_prev = zero_flag;
end

// update expected /o prevs

always @(trigger)
begin
	Overflow_expected_prev = Overflow_expected;
	Result_expected_prev = Result_expected;
	zero_flag_expected_prev = zero_flag_expected;
end


// expected Result[ 4 ]
initial
begin
	Result_expected[4] = 1'bX;
end 
// expected Result[ 3 ]
initial
begin
	Result_expected[3] = 1'bX;
end 
// expected Result[ 2 ]
initial
begin
	Result_expected[2] = 1'bX;
end 
// expected Result[ 1 ]
initial
begin
	Result_expected[1] = 1'bX;
end 
// expected Result[ 0 ]
initial
begin
	Result_expected[0] = 1'bX;
end 

// expected zero_flag
initial
begin
	zero_flag_expected = 1'bX;
end 

// expected Overflow
initial
begin
	Overflow_expected = 1'bX;
end 
// generate trigger
always @(Overflow_expected or Overflow or Result_expected or Result or zero_flag_expected or zero_flag)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Overflow = %b | expected Result = %b | expected zero_flag = %b | ",Overflow_expected_prev,Result_expected_prev,zero_flag_expected_prev);
	$display("| real Overflow = %b | real Result = %b | real zero_flag = %b | ",Overflow_prev,Result_prev,zero_flag_prev);
`endif
	if (
		( Overflow_expected_prev !== 1'bx ) && ( Overflow_prev !== Overflow_expected_prev )
		&& ((Overflow_expected_prev !== last_Overflow_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Overflow_expected_prev);
		$display ("     Real value = %b", Overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Overflow_exp = Overflow_expected_prev;
	end
	if (
		( Result_expected_prev[0] !== 1'bx ) && ( Result_prev[0] !== Result_expected_prev[0] )
		&& ((Result_expected_prev[0] !== last_Result_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Result_exp[0] = Result_expected_prev[0];
	end
	if (
		( Result_expected_prev[1] !== 1'bx ) && ( Result_prev[1] !== Result_expected_prev[1] )
		&& ((Result_expected_prev[1] !== last_Result_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Result_exp[1] = Result_expected_prev[1];
	end
	if (
		( Result_expected_prev[2] !== 1'bx ) && ( Result_prev[2] !== Result_expected_prev[2] )
		&& ((Result_expected_prev[2] !== last_Result_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Result_exp[2] = Result_expected_prev[2];
	end
	if (
		( Result_expected_prev[3] !== 1'bx ) && ( Result_prev[3] !== Result_expected_prev[3] )
		&& ((Result_expected_prev[3] !== last_Result_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Result_exp[3] = Result_expected_prev[3];
	end
	if (
		( Result_expected_prev[4] !== 1'bx ) && ( Result_prev[4] !== Result_expected_prev[4] )
		&& ((Result_expected_prev[4] !== last_Result_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Result_exp[4] = Result_expected_prev[4];
	end
	if (
		( zero_flag_expected_prev !== 1'bx ) && ( zero_flag_prev !== zero_flag_expected_prev )
		&& ((zero_flag_expected_prev !== last_zero_flag_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero_flag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_flag_expected_prev);
		$display ("     Real value = %b", zero_flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_zero_flag_exp = zero_flag_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab6_b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg add_sub;
reg [4:0] X;
reg [4:0] Y;
// wires                                               
wire Overflow;
wire [4:0] Result;
wire zero_flag;

wire sampler;                             

// assign statements (if any)                          
lab6_b i1 (
// port map - connection between master ports and signals/registers   
	.add_sub(add_sub),
	.Overflow(Overflow),
	.Result(Result),
	.X(X),
	.Y(Y),
	.zero_flag(zero_flag)
);

// add_sub
initial
begin
	add_sub = 1'b1;
	add_sub = #400000 1'b0;
	add_sub = #200000 1'b1;
	add_sub = #100000 1'b0;
	add_sub = #100000 1'b1;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b0;
	X[4] = #100000 1'b1;
	X[4] = #100000 1'b0;
	X[4] = #100000 1'b1;
	X[4] = #100000 1'b0;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b1;
	X[3] = #800000 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
	X[2] = #300000 1'b1;
	X[2] = #100000 1'b0;
	X[2] = #200000 1'b1;
	X[2] = #100000 1'b0;
	X[2] = #100000 1'b1;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b0;
	X[1] = #200000 1'b1;
	X[1] = #200000 1'b0;
	X[1] = #100000 1'b1;
	X[1] = #300000 1'b0;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b0;
	X[0] = #300000 1'b1;
	X[0] = #100000 1'b0;
	X[0] = #200000 1'b1;
end 
// Y[ 4 ]
initial
begin
	Y[4] = 1'b0;
	Y[4] = #100000 1'b1;
	Y[4] = #100000 1'b0;
	Y[4] = #100000 1'b1;
	Y[4] = #100000 1'b0;
	Y[4] = #100000 1'b1;
	Y[4] = #300000 1'b0;
	Y[4] = #100000 1'b1;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b1;
	Y[3] = #200000 1'b0;
	Y[3] = #200000 1'b1;
	Y[3] = #200000 1'b0;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b0;
	Y[2] = #200000 1'b1;
	Y[2] = #200000 1'b0;
	Y[2] = #300000 1'b1;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b0;
	Y[1] = #200000 1'b1;
	Y[1] = #200000 1'b0;
	Y[1] = #100000 1'b1;
	Y[1] = #100000 1'b0;
	Y[1] = #200000 1'b1;
	Y[1] = #100000 1'b0;
end 
// Y[ 0 ]
initial
begin
	Y[0] = 1'b0;
	Y[0] = #700000 1'b1;
	Y[0] = #100000 1'b0;
	Y[0] = #100000 1'b1;
end 

lab6_b_vlg_sample_tst tb_sample (
	.add_sub(add_sub),
	.X(X),
	.Y(Y),
	.sampler_tx(sampler)
);

lab6_b_vlg_check_tst tb_out(
	.Overflow(Overflow),
	.Result(Result),
	.zero_flag(zero_flag),
	.sampler_rx(sampler)
);
endmodule

